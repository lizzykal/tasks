
> react-typescript-starter@0.1.0 test
> react-scripts test --coverage

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
PASS src/nested.test.ts
FAIL src/arrays.test.ts
  ● Testing the array functions › Testing the injectPositive function

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
        100,
        199,
        1,
        -5,
    -   300,
    +   295,
        7,
        3,
      ]

      267 |         expect(injectPositive(NUMBERS_3)).toEqual([5, 5]);
      268 |         expect(injectPositive(NUMBERS_4)).toEqual([0]);
    > 269 |         expect(injectPositive(NUMBERS_5)).toEqual([100, 199, 1, -5, 300, 7, 3]);
          |                                           ^
      270 |         expect(injectPositive(NUMBERS_6)).toEqual([-100, 0, -200, 100, 200]);
      271 |         expect(injectPositive(NUMBERS_7)).toEqual([199, 1, 550, 50, 200, 1000]);
      272 |     });

      at Object.<anonymous> (src/arrays.test.ts:269:43)

PASS src/objects.test.ts
PASS src/components/StartAttempt.test.tsx
FAIL src/components/TwoDice.test.tsx
  ● TwoDice Component tests › Clicking left button changes first number

    expect(jest.fn()).toBeCalledTimes(expected)

    Expected number of calls: 3
    Received number of calls: 11

      52 |         leftButton.click();
      53 |         // Then the random function should be called 3 times
    > 54 |         expect(mathRandomFunction).toBeCalledTimes(3);
         |                                    ^
      55 |         // And the number to be 5
      56 |         const leftNumber = extractDigits(screen.getByTestId("left-die"));
      57 |         expect(leftNumber).toEqual(5);

      at Object.<anonymous> (src/components/TwoDice.test.tsx:54:36)

  ● TwoDice Component tests › Clicking right button changes second number

    expect(jest.fn()).toBeCalledTimes(expected)

    Expected number of calls: 3
    Received number of calls: 9

      64 |         rightButton.click();
      65 |         // Then the random function should be called 3 times
    > 66 |         expect(mathRandomFunction).toBeCalledTimes(3);
         |                                    ^
      67 |         // And the number to be 5
      68 |         const rightNumber = extractDigits(screen.getByTestId("right-die"));
      69 |         expect(rightNumber).toEqual(5);

      at Object.<anonymous> (src/components/TwoDice.test.tsx:66:36)

  ● TwoDice Component tests › Rolling two different numbers does not win or lose the game

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: 5

      82 |         const leftNumber = extractDigits(leftDie);
      83 |         const rightNumber = extractDigits(rightDie);
    > 84 |         expect(leftNumber).toEqual(1);
         |                            ^
      85 |         expect(rightNumber).toEqual(6);
      86 |         // And then the game is not won
      87 |         const winText = screen.queryByText(/Win/i);

      at Object.<anonymous> (src/components/TwoDice.test.tsx:84:28)

  ● TwoDice Component tests › Getting snake eyes loses the game

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: 5

      106 |         const leftNumber = extractDigits(leftDie);
      107 |         const rightNumber = extractDigits(rightDie);
    > 108 |         expect(leftNumber).toEqual(1);
          |                            ^
      109 |         expect(rightNumber).toEqual(1);
      110 |         // And then the game is not won
      111 |         const winText = screen.queryByText(/Win/i);

      at Object.<anonymous> (src/components/TwoDice.test.tsx:108:28)

  ● TwoDice Component tests › Getting matching numbers wins the game

    expect(received).toEqual(expected) // deep equality

    Expected: 5
    Received: 4

      129 |         const leftNumber = extractDigits(leftDie);
      130 |         const rightNumber = extractDigits(rightDie);
    > 131 |         expect(leftNumber).toEqual(5);
          |                            ^
      132 |         expect(rightNumber).toEqual(5);
      133 |         // And then the game is not lost
      134 |         const loseText = screen.queryByText(/Lose/i);

      at Object.<anonymous> (src/components/TwoDice.test.tsx:131:28)

PASS src/bad-components/ChooseTeam.test.tsx
FAIL src/bad-components/DoubleHalf.test.tsx
  ● Test suite failed to run

    Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
    1. You might have mismatching versions of React and the renderer (such as React DOM)
    2. You might be breaking the Rules of Hooks
    3. You might have more than one copy of React in the same app
    See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.

      2 | import { Button } from "react-bootstrap";
      3 |
    > 4 | export const [dhValue, setDhValue] = useState<number>(10);
        |                                      ^
      5 |
      6 | export function DoubleHalf(): JSX.Element {
      7 |     const handleDoubleClick = () => {

      at resolveDispatcher (node_modules/react/cjs/react.development.js:1476:13)
      at useState (node_modules/react/cjs/react.development.js:1507:20)
      at Object.<anonymous> (src/bad-components/DoubleHalf.tsx:4:38)
      at Object.<anonymous> (src/bad-components/DoubleHalf.test.tsx:3:1)

FAIL src/HtmlCss.test.tsx
  ● Test suite failed to run

    Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
    1. You might have mismatching versions of React and the renderer (such as React DOM)
    2. You might be breaking the Rules of Hooks
    3. You might have more than one copy of React in the same app
    See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.

      2 | import { Button } from "react-bootstrap";
      3 |
    > 4 | export const [dhValue, setDhValue] = useState<number>(10);
        |                                      ^
      5 |
      6 | export function DoubleHalf(): JSX.Element {
      7 |     const handleDoubleClick = () => {

      at resolveDispatcher (node_modules/react/cjs/react.development.js:1476:13)
      at useState (node_modules/react/cjs/react.development.js:1507:20)
      at Object.<anonymous> (src/bad-components/DoubleHalf.tsx:4:38)
      at Object.<anonymous> (src/App.tsx:10:1)
      at Object.<anonymous> (src/HtmlCss.test.tsx:3:1)

PASS src/functions.test.ts
PASS src/components/ChangeType.test.tsx
PASS src/components/CycleHoliday.test.tsx
PASS src/components/Counter.test.tsx
PASS src/components/RevealAnswer.test.tsx
FAIL src/bad-components/ColoredBox.test.tsx
  ● ColoredBox Component tests › Clicking the button advances the color.

    expect(element).toHaveStyle()

    - Expected

    - backgroundColor: blue;

      17 |         const nextColor = screen.getByRole("button");
      18 |         nextColor.click();
    > 19 |         expect(screen.getByTestId("colored-box")).toHaveStyle({
         |                                                   ^
      20 |             backgroundColor: "blue"
      21 |         });
      22 |         nextColor.click();

      at Object.<anonymous> (src/bad-components/ColoredBox.test.tsx:19:51)

PASS src/bad-components/ShoveBox.test.tsx
FAIL src/text.test.tsx
  ● Test suite failed to run

    Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
    1. You might have mismatching versions of React and the renderer (such as React DOM)
    2. You might be breaking the Rules of Hooks
    3. You might have more than one copy of React in the same app
    See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.

      2 | import { Button } from "react-bootstrap";
      3 |
    > 4 | export const [dhValue, setDhValue] = useState<number>(10);
        |                                      ^
      5 |
      6 | export function DoubleHalf(): JSX.Element {
      7 |     const handleDoubleClick = () => {

      at resolveDispatcher (node_modules/react/cjs/react.development.js:1476:13)
      at useState (node_modules/react/cjs/react.development.js:1507:20)
      at Object.<anonymous> (src/bad-components/DoubleHalf.tsx:4:38)
      at Object.<anonymous> (src/App.tsx:10:1)
      at Object.<anonymous> (src/text.test.tsx:3:1)

FAIL src/App.test.tsx
  ● Test suite failed to run

    Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
    1. You might have mismatching versions of React and the renderer (such as React DOM)
    2. You might be breaking the Rules of Hooks
    3. You might have more than one copy of React in the same app
    See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.

      2 | import { Button } from "react-bootstrap";
      3 |
    > 4 | export const [dhValue, setDhValue] = useState<number>(10);
        |                                      ^
      5 |
      6 | export function DoubleHalf(): JSX.Element {
      7 |     const handleDoubleClick = () => {

      at resolveDispatcher (node_modules/react/cjs/react.development.js:1476:13)
      at useState (node_modules/react/cjs/react.development.js:1507:20)
      at Object.<anonymous> (src/bad-components/DoubleHalf.tsx:4:38)
      at Object.<anonymous> (src/App.tsx:10:1)
      at Object.<anonymous> (src/App.test.tsx:3:1)
      at TestScheduler.scheduleTests (node_modules/@jest/core/build/TestScheduler.js:333:13)
      at runJest (node_modules/@jest/core/build/runJest.js:404:19)
      at _run10000 (node_modules/@jest/core/build/cli/index.js:320:7)
      at runCLI (node_modules/@jest/core/build/cli/index.js:173:3)

----------------------|---------|----------|---------|---------|-------------------
File                  | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------------------|---------|----------|---------|---------|-------------------
All files             |   95.54 |    90.32 |   95.14 |   95.35 |                   
 src                  |   97.57 |    95.38 |   97.05 |   97.41 |                   
  App.tsx             |       0 |      100 |       0 |       0 | 16-30             
  arrays.ts           |     100 |      100 |     100 |     100 |                   
  functions.ts        |   95.23 |    91.66 |     100 |   95.23 | 54                
  nested.ts           |     100 |    95.65 |     100 |     100 | 244               
  objects.ts          |   96.55 |       90 |     100 |   96.55 | 54                
 src/bad-components   |   78.12 |       50 |   82.35 |   78.12 |                   
  ChooseTeam.tsx      |     100 |       50 |     100 |     100 | 18                
  ColoredBox.tsx      |     100 |      100 |     100 |     100 |                   
  DoubleHalf.tsx      |       0 |      100 |       0 |       0 | 4-15              
  DoubleHalfState.tsx |       0 |      100 |     100 |       0 | 3                 
  ShoveBox.tsx        |     100 |      100 |     100 |     100 |                   
 src/components       |     100 |    80.76 |     100 |     100 |                   
  ChangeType.tsx      |     100 |      100 |     100 |     100 |                   
  Counter.tsx         |     100 |      100 |     100 |     100 |                   
  CycleHoliday.tsx    |     100 |      100 |     100 |     100 |                   
  RevealAnswer.tsx    |     100 |      100 |     100 |     100 |                   
  StartAttempt.tsx    |     100 |    83.33 |     100 |     100 | 9                 
  TwoDice.tsx         |     100 |    66.66 |     100 |     100 | 20,33-44          
 src/interfaces       |       0 |        0 |       0 |       0 |                   
  answer.ts           |       0 |        0 |       0 |       0 |                   
  question.ts         |       0 |        0 |       0 |       0 |                   
----------------------|---------|----------|---------|---------|-------------------
Test Suites: 7 failed, 10 passed, 17 total
Tests:       7 failed, 97 passed, 104 total
Snapshots:   0 total
Time:        10.035 s
Ran all test suites.
